#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* repos
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

#+END_SRC
* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(recentf-mode 1)
(delete-selection-mode 1)
(add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
;; (menu-bar-mode -1)
(scroll-bar-mode -1)
(global-display-line-numbers-mode)
(set-language-environment "UTF-8")
(setq initial-scratch-message ";; scratch buffer\n")
(setq column-number-mode t)
(setq size-indication-mode t)
#+END_SRC
* Transparency
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(90))
;(add-to-list 'default-frame-alist '(alpha . (90 . 90)))
(defun toggle-transparency ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(90 . 90) '(100 . 100)))))
(global-set-key (kbd "C-c t") 'toggle-transparency)
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC

* which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC
* Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org 
    :ensure t
    :pin org)

  (setenv "BROWSER" "firefox")
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Ace windows for each windows switching
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0)))))))

#+END_SRC
* Swiper/ Ivy/ Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

    (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))


    (use-package swiper
    :ensure t
    :bind (("C-s" . swiper-isearch)
	   ("C-r" . swiper-isearch)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))

#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)

    (global-company-mode t))

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
  (use-package company-jedi
      :ensure t
      :config
      (add-hook 'python-mode-hook 'jedi:setup))

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)

  ;; ;; ;; company box mode
  (use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode)) 
#+END_SRC
* All the icons
#+BEGIN_SRC emacs-lisp
    (use-package all-the-icons 
      :ensure t
      :defer 0.5)

    (use-package all-the-icons-ivy
      :ensure t
      :after (all-the-icons ivy)
      :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window ivy-switch-buffer))
      :config
      (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
      (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
      (all-the-icons-ivy-setup))

    (use-package all-the-icons-dired
      :ensure t)

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  (setq inhibit-compacting-font-caches t)

#+END_SRC
* Themes and modeline
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :ensure t)
  (use-package doom-modeline
    :ensure t)
  (require 'doom-modeline)
  (doom-modeline-init)
  (load-theme 'dracula t)
#+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (setq py-python-command "python")
  (setq python-shell-interpreter "python")
      (use-package elpy
      :ensure t
      :config 
      (elpy-enable))

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))

#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
* Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC
* Misc packages
#+BEGIN_SRC emacs-lisp
  ; Highlights the current cursor line
  (global-hl-line-mode t)
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))

  (use-package multiple-cursors
    :ensure t)

  (setq save-interprogram-paste-before-kill t)

  (global-auto-revert-mode 1) ;; you might not want this
  (setq auto-revert-verbose nil) ;; or this
  (global-set-key (kbd "<f5>") 'revert-buffer)

  ; if you're windened, narrow to the region, if you're narrowed, widen
  ; bound to C-x n
  (defun narrow-or-widen-dwim (p)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
    Intelligently means: region, org-src-block, org-subtree, or defun,
    whichever applies first.
    Narrowing to org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer is already
    narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
	  ((region-active-p)
	   (narrow-to-region (region-beginning) (region-end)))
	  ((derived-mode-p 'org-mode)
	   ;; `org-edit-src-code' is not a real narrowing command.
	   ;; Remove this first conditional if you don't want it.
	   (cond ((ignore-errors (org-edit-src-code))
		  (delete-other-windows))
		 ((org-at-block-p)
		  (org-narrow-to-block))
		 (t (org-narrow-to-subtree))))
	  (t (narrow-to-defun))))

  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+END_SRC

* DIRED
#+BEGIN_SRC emacs-lisp
  ; wiki melpa problem
  ;(use-package dired+
  ;  :ensure t
  ;  :config (require 'dired+)
  ;  )

  (setq dired-dwim-target t)

  (use-package dired-narrow
    :ensure t
    :config
    (bind-key "C-c C-n" #'dired-narrow)
    (bind-key "C-c C-f" #'dired-narrow-fuzzy)
    (bind-key "C-x C-N" #'dired-narrow-regexp))

  (use-package dired-subtree :ensure t
    :after dired
    :config
    (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
    (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
  (setq projectile-completion-system 'ivy))

#+END_SRC
* Parens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :hook (prog-mode . smartparens-mode)
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    (require 'smartparens-config))

  (show-paren-mode t)
   
  ;; rainbow parens
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Font Scalling
#+BEGIN_SRC emacs-lisp
  (use-package default-text-scale
    :ensure t
    :config
    (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
    (global-set-key (kbd "C-M--") 'default-text-scale-decrease))

  (define-key ctl-x-map [(control ?0)] 'zoom-in/out)

#+END_SRC
* git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
    (bind-key "C-x g" 'magit-status)
    ))

    (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

    (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


    (use-package git-timemachine
    :ensure t
    )
#+END_SRC
* Word stuff
#+BEGIN_SRC emacs-lisp
  (use-package dictionary
    :ensure t)
#+END_SRC
* Racket
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode
    :ensure t
    :config
    (setq tab-always-indent 'complete))

#+END_SRC
* Flash modeline instead of bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function
      (lambda ()
        (let ((orig-fg (face-foreground 'mode-line)))
          (set-face-foreground 'mode-line "#F2804F")
          (run-with-idle-timer 0.1 nil
                               (lambda (fg) (set-face-foreground 'mode-line fg))
                               orig-fg))))

#+END_SRC
